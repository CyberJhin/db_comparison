CREATE OR REPLACE FUNCTION s_grnplm_ld_cib_sbc_devcore.execute_inserts(task text)
       RETURNS void
       LANGUAGE plpgsql
       VOLATILE
AS $$
       
       
DECLARE
    dml text;
    batch_size integer := 1;
    batch_count integer := 0;
    total_rows integer;
BEGIN

    SELECT max(batch_cnt) INTO total_rows FROM s_grnplm_ld_cib_sbc_devcore.t_tech_backup_dml_hist where task_name = task ;


    FOR batch_count IN 0..(total_rows)
    loop
       RAISE NOTICE 'Batch %', batch_count;
             select object_dml into dml from s_grnplm_ld_cib_sbc_devcore.t_tech_backup_dml_hist where task_name = task and batch_cnt = batch_count;       
        EXECUTE dml;
    END LOOP;
END;


$$
EXECUTE ON ANY;


CREATE OR REPLACE FUNCTION s_grnplm_ld_cib_sbc_devcore.generate_inserts(schema_nm text, table_nm text, task text)
       RETURNS void
       LANGUAGE plpgsql
       VOLATILE
AS $$
       
DECLARE
    CODE TEXT;
    result_srt text;
    batch_size integer := 25000;
    batch_count integer := 0;
    total_rows integer;
BEGIN

    EXECUTE 'SELECT COUNT(*) FROM ' || schema_nm || '.' || table_nm INTO total_rows;
        CODE := (
            SELECT 'SELECT string_agg(''INSERT INTO ' || table_schema || '.' || table_name ||' (' || replace(replace(array_agg(column_name::text)::text,'{',''),'}','') || ') VALUES (''||' || replace(replace(replace(array_agg('quote_nullable(' || column_name::text || ')')::text,'{',''),'}',''),',',' || '','' || ') || ' || '');'', E''\n'') ' || 'FROM (select * from ' || table_schema || '.' || table_name || ' OFFSET ' || (batch_count * batch_size) || ' LIMIT ' || batch_size || ') t;'
            FROM information_schema.columns
            WHERE table_schema = schema_nm AND table_name = table_nm
            GROUP BY table_schema, table_name
        );

    FOR batch_count IN 0..(total_rows / batch_size)
    LOOP
            
        EXECUTE CODE into result_srt;
             RAISE NOTICE 'Batch %', batch_count;
        INSERT INTO s_grnplm_ld_cib_sbc_devcore.t_tech_backup_dml_hist (task_name, object_name,batch_cnt, object_dml, backup_date ) VALUES (task, table_nm,batch_count, result_srt, now());


       --RETURN QUERY EXECUTE  CODE ;
       -- EXECUTE CODE INTO result_srt;

        --RAISE NOTICE 'Batch %: %', batch_count, result_srt;
    END LOOP;
END;

$$
EXECUTE ON ANY;



--------------------------------------------------------

CREATE OR REPLACE FUNCTION s_grnplm_ld_cib_sbc_devcore.generate_inserts(schema_nm text, table_nm text, task text)
RETURNS void
LANGUAGE plpgsql
VOLATILE
AS $$
DECLARE
    CODE TEXT;
    result_srt text;
    batch_size integer := 5000;
    batch_count integer;
    total_rows integer;
BEGIN
    EXECUTE 'SELECT COUNT(*) FROM ' || schema_nm || '.' || table_nm INTO total_rows;

    FOR batch_count IN 1..LEAST(CEIL(total_rows / batch_size), total_rows / batch_size + 1)
    LOOP
        CODE := (
            SELECT 'SELECT string_agg(''INSERT INTO ' || table_schema || '.' || table_name ||' (' || replace(replace(array_agg(column_name::text)::text,'{',''),'}','') || ') VALUES (''||' || replace(replace(replace(array_agg('quote_nullable(' || column_name::text || ')')::text,'{',''),'}',''),',',' || '','' || ') || ' || '');'', E''\n'') ' || 'FROM (select * from ' || table_schema || '.' || table_name || ' OFFSET ' || ((batch_count - 1) * batch_size) || ' LIMIT ' || batch_size || ') t;'
            FROM information_schema.columns
            WHERE table_schema = schema_nm AND table_name = table_nm
            GROUP BY table_schema, table_name
        );

        EXECUTE CODE INTO result_srt;
        RAISE NOTICE 'Batch %', batch_count;
        INSERT INTO s_grnplm_ld_cib_sbc_devcore.t_tech_backup_dml_hist (task_name, object_name,batch_cnt, object_dml, backup_date ) VALUES (task, table_nm,batch_count, result_srt, now());
    END LOOP;
END;
$$;



CREATE OR REPLACE FUNCTION s_grnplm_ld_cib_sbc_devcore.execute_inserts(task text)
       RETURNS void
       LANGUAGE plpgsql
       VOLATILE
AS $$
       
DECLARE
    dml text;
    batch_count integer := 1;
    total_rows integer;
BEGIN

    SELECT max(batch_cnt) INTO total_rows 
    FROM s_grnplm_ld_cib_sbc_devcore.t_tech_backup_dml_hist 
    WHERE task_name = task ;


    FOR batch_count IN 1..total_rows
    LOOP
       RAISE NOTICE 'Batch %', batch_count;
       SELECT object_dml INTO dml 
       FROM s_grnplm_ld_cib_sbc_devcore.t_tech_backup_dml_hist 
       WHERE task_name = task AND batch_cnt = batch_count;
       
       IF dml IS NOT NULL THEN
           EXECUTE dml;
       ELSE
           RAISE NOTICE 'No DML found for task % and batch %', task, batch_count;
       END IF;
    END LOOP;
END;
$$;
